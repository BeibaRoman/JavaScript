/* function greet(name) {
  console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
}

function registerGuest(name, callback) {
  console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
  callback(name);
}

registerGuest("–ú–∞–Ω–≥–æ", greet);
 */

/* function registerGuest(name, callback) {
  console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
  callback(name);
}

registerGuest("–ú–∞–Ω–≥–æ", function greet(name) {
  console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
});

registerGuest("–ü–æ–ª—ñ", function notify(name) {
  console.log(`–®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${name}, –≤–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω.`);
}); */

/* function processCall(recipient, onAvailable, onNotAvailable) {
  const isRecipientAvailable = Math.random() > 0.5;

  if (!isRecipientAvailable) {
    onNotAvailable(recipient);
    return;
  }

  onAvailable(recipient);
}

function takeCall(name) {
  console.log(`–ó'—î–¥–Ω—É—î–º–æ –∑ ${name}, –æ—á—ñ–∫—É–π—Ç–µ...`);
  // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –¥–∑–≤—ñ–Ω–∫–∞
}

function activateAnsweringMachine(name) {
  console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`);
  // –õ–æ–≥—ñ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞
}

function leaveHoloMessage(name) {
  console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ø–∏—Å—É—î–º–æ –≥–æ–ª–æ–≥—Ä–∞–º—É.`);
  // –õ–æ–≥—ñ–∫–∞ –∑–∞–ø–∏—Å—É –≥–æ–ª–æ–≥—Ä–∞–º–∏
}

processCall("–ú–∞–Ω–≥–æ", takeCall, activateAnsweringMachine);
processCall("–ú–∞–Ω–≥–æ", takeCall, leaveHoloMessage); */

/* function printValue(value) {
  console.log(value);
}

function prettyPrint(value) {
  console.log("Logging value: ", value);
}

function repeat(n, action) {
  for (let i = 1; i <= n; i += 1) {
    action(i);
  }
}

repeat(10, printValue);
repeat(10, prettyPrint);
 */

// const numbers = [5, 10, 15, 20, 25];

// –ö–ª–∞—Å–∏—á–Ω–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${i}, –∑–Ω–∞—á–µ–Ω–Ω—è ${numbers[i]}`);
// }

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è forEach
// numbers.forEach(function (number, index) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// const add = (a, b, c) => a + b + c;

// console.log(add(2, 6, 3));

// const add = (a) => a + 5;
// console.log(add(6));

/* const greet = () => {
  console.log("Hello");
};

greet();
 */

/* const add = (a, b, c) => {
  console.log(a, b, c);
  return a + b + c;
};

add(5, 9, 3); */

/* const numbers = [5, 10, 15, 20, 25]; */

/* numbers.forEach(function (number, index) {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
}); */

/* numbers.forEach((number, index) => {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
}); */

/* const numbers = [5, 10, 15, 20, 25];

const logMessage = (number, index) => {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
};

numbers.forEach(logMessage); */

//–ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

/* const dirtyMultiply = (array, value) => {
  for (let i = 0; i < array.length; i += 1) {
    array[i] = array[i] * value;
  }
};

const numbers = [1, 2, 3, 4, 5];
dirtyMultiply(numbers, 2);

console.log(numbers); */

/* const pureMultiply = (array, value) => {
  const newArray = [];

  array.forEach((element) => {
    newArray.push(element * value);
  });

  return newArray;
};

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = pureMultiply(numbers, 2);

console.log(numbers);

console.log(doubledNumbers); */
/* 
const doMath = function (a, b, callback) {
  const result = callback(a, b);
  console.log(result);
};

doMath(2, 6, function (x, y) {
  return x * y;
});

doMath(2, 6, function (x, y) {
  return x - y;
});

doMath(2, 6, function (x, y) {
  return x + y;
}); */

const buttonRef = document.querySelector(".js-button");

const handlBtnClick = function () {
  console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ " + Date.now());
};

buttonRef.addEventListener("click", handlBtnClick);

/* const onGetPositionSuccess = function (position) {
  console.log("–¶–µ –≤–∏–∫–ª–∏–∫ onGetPositionSuccess");
  console.log(position);
};

const onGetPositionError = function (error) {
  console.log("–¶–µ –≤–∏–∫–ª–∏–∫ onGetPositionError");
  console.log(error);
};

window.navigator.geolocation.getCurrentPosition(
  onGetPositionSuccess,
  onGetPositionError
);
 */

/* const callback = function () {
  console.log("–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç—ñ");
};

console.log("–î–æ setTimeout()");

setTimeout(callback, 2000);

console.log("–ü—ñ—Å–ª—è setTimeout()"); */

/* const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }
  return filteredArray;
};

const callback1 = function (value) {
  return value >= 3;
};

const callback2 = function (value) {
  return value <= 4;
};

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

const fruits = [
  { name: "apples", quantity: 200, isFresh: true },
  { name: "grapes", quantity: 150, isFresh: false },
  { name: "bananas", quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = function (fruit) {
  return fruit.quantity >= 120;
};

const r3 = filter(fruits, getFruitsWithQuantity);

console.log(r3); */

/* const fnA = function (parameter) {
  const innerVariable = "–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA";

  const innerFunction = function () {
    console.log(parameter);
    console.log(innerVariable);
    console.log("–í–∏–∫–ª–∏–∫ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó");
  };

  return innerFunction;
};

const fnB = fnA("Borys");

fnB(); */

/* const makeSheff = function (name) {
  const makeDish = function (dish) {
    console.log(`${name} –≥–æ—Ç—É—î ${dish}`);
  };

  return makeDish;
};

const borys = makeSheff("–ë–æ—Ä–∏—Å");

const bogdan = makeSheff("–ë–æ–≥–¥–∞–Ω");

borys("–ú–ª–∏–Ω—Ü—ñ");

borys("–í–∞—Ä–µ–Ω–∏–∫–∏");

bogdan("–ë–æ—Ä—â");
bogdan("–•–ª—ñ–±"); */

/* const rounder = function (places) {
  return function (number) {
    return Number(number.toFixed(places));
  };
};

const rounder2 = rounder(2);
const rounder3 = rounder(3);

console.log(rounder2(3.4567));

console.log(rounder2(3.4567));
console.log(rounder2(3.4526567));
console.log(rounder2(3.4645567));

console.log(rounder3(3.4526567));
console.log(rounder3(3.4645567)); */

/* const salaryManagerFactory = function (employeeName, baseSalary = 0) {
  let salary = baseSalary;

  return {
    raise(amount) {
      if (amount > 1000) {
        return "–¢–∏ –æ–±–Ω–∞–≥–ª—ñ–≤?";
      }
      salary + amount;
    },
    lower(amount) {
      salary -= amount;
    },
    current() {
      return `–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç ${employeeName} - ${salary}`;
    },
  };
};

const salaryManager = salaryManagerFactory("Mango", 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current()); */

/* const filter = (array, test) => {
  const filteredArray = [];
  for (const el of array) {
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

console.log(filter([1, 2, 3, 4, 5], (value) => value >= 3));

console.log(filter([1, 2, 3, 4, 5, 6, 7, 8], (value) => value <= 4));

const fruits = [
  { name: "apples", quantity: 200, isFresh: true },
  { name: "grapes", quantity: 150, isFresh: false },
  { name: "bananas", quantity: 100, isFresh: true },
];

console.log(filter(fruits, (fruit) => fruit.quantity >= 120)); */

// !============================================
/* const apple = { name: "üçé", price: 30, quantity: 3 };
const lemon = { name: "üçã", price: 20, quantity: 5 };

function createProduct(obj, callback) {
  const newProduct = { ...obj, id: Date.now() };
  callback(newProduct);
  // callback( { ...obj, id: Date.now() };);
}
const logProduct = (product) => console.log(product);
const logTotalPrice = ({ price, quantity }) => console.log(price * quantity);

createProduct(apple, logProduct);
createProduct(lemon, logTotalPrice);
 */

/* const TRANSACTION_LIMIT = 1000;

const account = {
  username: "Jacob",
  balance: 400,

  withdraw(amount, onSuccess, onError) {
    if (amount >= TRANSACTION_LIMIT) {
      onError(`–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`);
    } else if (amount > this.balance) {
      onError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    } else {
      this.balance -= amount;
      onSuccess(`–ö–æ—à—Ç–∏ –∑–Ω—è—Ç–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    }
  },

  deposit(amount, onSuccess, onError) {
    if (amount >= TRANSACTION_LIMIT) {
      onError(`–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`);
    } else if (amount < 0) {
      onError("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫–ª–∞—Å—Ç–∏ —Ç–∞–∫—É —Å—É–º—É. –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–∞ –∑–∞ 0");
    } else {
      this.balance += amount;
      onSuccess(`–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    }
  },
};

function handleSuccess(message) {
  console.log(`‚úÖ Success! ${message}`);
}

function handleError(message) {
  console.log(`‚ùå Error! ${message}`);
}

account.withdraw(500, handleSuccess, handleError);
account.withdraw(1500, handleSuccess, handleError);
account.deposit(400, handleSuccess, handleError);
account.deposit(1200, handleSuccess, handleError);
account.deposit(-3, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.withdraw(700, handleSuccess, handleError); */
/* 
function each(array, callback) {
  const newArray = [];

  array.forEach((element) => newArray.push(callback(element)));

  return newArray;
}

const arr = [1, 2, 3, 4, 5];
console.log(each(arr, (num) => num + 1));
console.log(each(arr, (num) => num * 2));
console.log(each(arr, (num) => num - 1));
console.log(each(arr, (num) => Math.sqrt(num)));
 */

function calculateAverage(...args) {
  let total = 0;
  args.forEach((item) => (total += item));

  return total / args.length;
}

console.log(calculateAverage(1, 5, 3, 7, 2)); // 3.6
console.log(calculateAverage(5, 8));
console.log(calculateAverage(1, 2, 3));
