/* function greet(name) {
  console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
}

function registerGuest(name, callback) {
  console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
  callback(name);
}

registerGuest("–ú–∞–Ω–≥–æ", greet);
 */

/* function registerGuest(name, callback) {
  console.log(`–†–µ—î—Å—Ç—Ä—É—î–º–æ –≥–æ—Å—Ç—è ${name}.`);
  callback(name);
}

registerGuest("–ú–∞–Ω–≥–æ", function greet(name) {
  console.log(`–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ ${name}.`);
});

registerGuest("–ü–æ–ª—ñ", function notify(name) {
  console.log(`–®–∞–Ω–æ–≤–Ω–∏–π(–∞) ${name}, –≤–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω.`);
}); */

/* function processCall(recipient, onAvailable, onNotAvailable) {
  const isRecipientAvailable = Math.random() > 0.5;

  if (!isRecipientAvailable) {
    onNotAvailable(recipient);
    return;
  }

  onAvailable(recipient);
}

function takeCall(name) {
  console.log(`–ó'—î–¥–Ω—É—î–º–æ –∑ ${name}, –æ—á—ñ–∫—É–π—Ç–µ...`);
  // –õ–æ–≥—ñ–∫–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –¥–∑–≤—ñ–Ω–∫–∞
}

function activateAnsweringMachine(name) {
  console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ª–∏—à—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.`);
  // –õ–æ–≥—ñ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞
}

function leaveHoloMessage(name) {
  console.log(`–ê–±–æ–Ω–µ–Ω—Ç ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∑–∞–ø–∏—Å—É—î–º–æ –≥–æ–ª–æ–≥—Ä–∞–º—É.`);
  // –õ–æ–≥—ñ–∫–∞ –∑–∞–ø–∏—Å—É –≥–æ–ª–æ–≥—Ä–∞–º–∏
}

processCall("–ú–∞–Ω–≥–æ", takeCall, activateAnsweringMachine);
processCall("–ú–∞–Ω–≥–æ", takeCall, leaveHoloMessage); */

/* function printValue(value) {
  console.log(value);
}

function prettyPrint(value) {
  console.log("Logging value: ", value);
}

function repeat(n, action) {
  for (let i = 1; i <= n; i += 1) {
    action(i);
  }
}

repeat(10, printValue);
repeat(10, prettyPrint);
 */

// const numbers = [5, 10, 15, 20, 25];

// –ö–ª–∞—Å–∏—á–Ω–∏–π for
// for (let i = 0; i < numbers.length; i += 1) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${i}, –∑–Ω–∞—á–µ–Ω–Ω—è ${numbers[i]}`);
// }

// –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ–±–∏—Ä–∞–Ω–Ω—è forEach
// numbers.forEach(function (number, index) {
//   console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
// });

// const add = (a, b, c) => a + b + c;

// console.log(add(2, 6, 3));

// const add = (a) => a + 5;
// console.log(add(6));

/* const greet = () => {
  console.log("Hello");
};

greet();
 */

/* const add = (a, b, c) => {
  console.log(a, b, c);
  return a + b + c;
};

add(5, 9, 3); */

/* const numbers = [5, 10, 15, 20, 25]; */

/* numbers.forEach(function (number, index) {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
}); */

/* numbers.forEach((number, index) => {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
}); */

/* const numbers = [5, 10, 15, 20, 25];

const logMessage = (number, index) => {
  console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
};

numbers.forEach(logMessage); */

//–ß–∏—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

/* const dirtyMultiply = (array, value) => {
  for (let i = 0; i < array.length; i += 1) {
    array[i] = array[i] * value;
  }
};

const numbers = [1, 2, 3, 4, 5];
dirtyMultiply(numbers, 2);

console.log(numbers); */

/* const pureMultiply = (array, value) => {
  const newArray = [];

  array.forEach((element) => {
    newArray.push(element * value);
  });

  return newArray;
};

const numbers = [1, 2, 3, 4, 5];
const doubledNumbers = pureMultiply(numbers, 2);

console.log(numbers);

console.log(doubledNumbers); */
/* 
const doMath = function (a, b, callback) {
  const result = callback(a, b);
  console.log(result);
};

doMath(2, 6, function (x, y) {
  return x * y;
});

doMath(2, 6, function (x, y) {
  return x - y;
});

doMath(2, 6, function (x, y) {
  return x + y;
}); */

const buttonRef = document.querySelector(".js-button");

const handlBtnClick = function () {
  console.log("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ " + Date.now());
};

buttonRef.addEventListener("click", handlBtnClick);

/* const onGetPositionSuccess = function (position) {
  console.log("–¶–µ –≤–∏–∫–ª–∏–∫ onGetPositionSuccess");
  console.log(position);
};

const onGetPositionError = function (error) {
  console.log("–¶–µ –≤–∏–∫–ª–∏–∫ onGetPositionError");
  console.log(error);
};

window.navigator.geolocation.getCurrentPosition(
  onGetPositionSuccess,
  onGetPositionError
);
 */

/* const callback = function () {
  console.log("–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç—ñ");
};

console.log("–î–æ setTimeout()");

setTimeout(callback, 2000);

console.log("–ü—ñ—Å–ª—è setTimeout()"); */

/* const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }
  return filteredArray;
};

const callback1 = function (value) {
  return value >= 3;
};

const callback2 = function (value) {
  return value <= 4;
};

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

const fruits = [
  { name: "apples", quantity: 200, isFresh: true },
  { name: "grapes", quantity: 150, isFresh: false },
  { name: "bananas", quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = function (fruit) {
  return fruit.quantity >= 120;
};

const r3 = filter(fruits, getFruitsWithQuantity);

console.log(r3); */

/* const fnA = function (parameter) {
  const innerVariable = "–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA";

  const innerFunction = function () {
    console.log(parameter);
    console.log(innerVariable);
    console.log("–í–∏–∫–ª–∏–∫ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó");
  };

  return innerFunction;
};

const fnB = fnA("Borys");

fnB(); */

/* const makeSheff = function (name) {
  const makeDish = function (dish) {
    console.log(`${name} –≥–æ—Ç—É—î ${dish}`);
  };

  return makeDish;
};

const borys = makeSheff("–ë–æ—Ä–∏—Å");

const bogdan = makeSheff("–ë–æ–≥–¥–∞–Ω");

borys("–ú–ª–∏–Ω—Ü—ñ");

borys("–í–∞—Ä–µ–Ω–∏–∫–∏");

bogdan("–ë–æ—Ä—â");
bogdan("–•–ª—ñ–±"); */

/* const rounder = function (places) {
  return function (number) {
    return Number(number.toFixed(places));
  };
};

const rounder2 = rounder(2);
const rounder3 = rounder(3);

console.log(rounder2(3.4567));

console.log(rounder2(3.4567));
console.log(rounder2(3.4526567));
console.log(rounder2(3.4645567));

console.log(rounder3(3.4526567));
console.log(rounder3(3.4645567)); */

/* const salaryManagerFactory = function (employeeName, baseSalary = 0) {
  let salary = baseSalary;

  return {
    raise(amount) {
      if (amount > 1000) {
        return "–¢–∏ –æ–±–Ω–∞–≥–ª—ñ–≤?";
      }
      salary + amount;
    },
    lower(amount) {
      salary -= amount;
    },
    current() {
      return `–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç ${employeeName} - ${salary}`;
    },
  };
};

const salaryManager = salaryManagerFactory("Mango", 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current()); */

/* const filter = (array, test) => {
  const filteredArray = [];
  for (const el of array) {
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

console.log(filter([1, 2, 3, 4, 5], (value) => value >= 3));

console.log(filter([1, 2, 3, 4, 5, 6, 7, 8], (value) => value <= 4));

const fruits = [
  { name: "apples", quantity: 200, isFresh: true },
  { name: "grapes", quantity: 150, isFresh: false },
  { name: "bananas", quantity: 100, isFresh: true },
];

console.log(filter(fruits, (fruit) => fruit.quantity >= 120)); */

// !============================================
/* const apple = { name: "üçé", price: 30, quantity: 3 };
const lemon = { name: "üçã", price: 20, quantity: 5 };

function createProduct(obj, callback) {
  const newProduct = { ...obj, id: Date.now() };
  callback(newProduct);
  // callback( { ...obj, id: Date.now() };);
}
const logProduct = (product) => console.log(product);
const logTotalPrice = ({ price, quantity }) => console.log(price * quantity);

createProduct(apple, logProduct);
createProduct(lemon, logTotalPrice);
 */

/* const TRANSACTION_LIMIT = 1000;

const account = {
  username: "Jacob",
  balance: 400,

  withdraw(amount, onSuccess, onError) {
    if (amount >= TRANSACTION_LIMIT) {
      onError(`–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`);
    } else if (amount > this.balance) {
      onError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    } else {
      this.balance -= amount;
      onSuccess(`–ö–æ—à—Ç–∏ –∑–Ω—è—Ç–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    }
  },

  deposit(amount, onSuccess, onError) {
    if (amount >= TRANSACTION_LIMIT) {
      onError(`–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç! –ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: ${TRANSACTION_LIMIT}`);
    } else if (amount < 0) {
      onError("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫–ª–∞—Å—Ç–∏ —Ç–∞–∫—É —Å—É–º—É. –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–∞ –∑–∞ 0");
    } else {
      this.balance += amount;
      onSuccess(`–ö–æ—à—Ç–∏ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${this.balance}`);
    }
  },
};

function handleSuccess(message) {
  console.log(`‚úÖ Success! ${message}`);
}

function handleError(message) {
  console.log(`‚ùå Error! ${message}`);
}

account.withdraw(500, handleSuccess, handleError);
account.withdraw(1500, handleSuccess, handleError);
account.deposit(400, handleSuccess, handleError);
account.deposit(1200, handleSuccess, handleError);
account.deposit(-3, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.withdraw(700, handleSuccess, handleError); */
/* 
function each(array, callback) {
  const newArray = [];

  array.forEach((element) => newArray.push(callback(element)));

  return newArray;
}

const arr = [1, 2, 3, 4, 5];
console.log(each(arr, (num) => num + 1));
console.log(each(arr, (num) => num * 2));
console.log(each(arr, (num) => num - 1));
console.log(each(arr, (num) => Math.sqrt(num)));
 */
/* 
function calculateAverage(...args) {
  let total = 0;
  args.forEach((item) => (total += item));

  return total / args.length;
}

console.log(calculateAverage(1, 5, 3, 7, 2)); // 3.6
console.log(calculateAverage(5, 8));
console.log(calculateAverage(1, 2, 3)); */

// ! Exercise 1

/* function alphabetPosition(text) {
  var result = [];
  var alphabet = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
  ];

  text = text
    .replace(/\W*\d+/g, "")
    .toLowerCase()
    .split("");
  // return text;

  for (let i = 0; i < text.length; i += 1) {
    if (!(alphabet.indexOf(text[i]) === -1)) {
      result.push(alphabet.indexOf(text[i]) + 1);
    }
  }

  return result.join(" ");
}

console.log(alphabetPosition("The sunset sets at twelve o' clock.")); */

/* function replace(s) {
  const vowels = ["a", "e", "i", "o", "u"];
  const newArray = [...s];
  let result = "";
  for (let i = 0; i < newArray.length; i += 1) {
    if (vowels.includes(newArray[i].toLowerCase())) {
      result += "!";
    } else {
      result += newArray[i];
    }

    //
  }
  return result;
}

console.log(replace("Hi!"));
console.log(replace("!Hi! Hi!"));
console.log(replace("ABCDE"));
console.log(replace("aeiou")); */
// !==========Mathod .map()==============

/* const planets = ["–ó–µ–º–ª—è", "–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–Æ–ø—ñ—Ç–µ—Ä"];

const planetsInUpperCase = planets.map((planet) => planet.toUpperCase());

console.log(planetsInUpperCase);

const planetsInLowerCase = planets.map((planet) => planet.toLowerCase());
console.log(planetsInLowerCase);

console.log(planets); */

/* const students = [
  { name: "–ú–∞–Ω–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 59 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
  { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
];

const names = students.map((student) => student.name);

console.log(names); */

// !==========Mathod .flapMap()==============

/* const students = [
  { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
  { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
  { name: "–ö—ñ–≤—ñ", courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
];

const courses = students.map((student) => student.courses);
console.log(courses);

const uniqueCourses = courses.flatMap((course) => course);

console.log(uniqueCourses); */

// !==========Mathod .filter()==============

/* const values = [51, -3, 27, 21, -68, 42, -37];

const positiveValue = values.filter((value) => value >= 0);
console.log(positiveValue);

const negativeValue = values.filter((value) => value <= 0);
console.log(negativeValue);

const bigValue = values.filter((value) => value > 1000);
console.log(bigValue); */

/* const students = [
  { name: "–ú–∞–Ω–≥–æ", courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
  { name: "–ü–æ–ª—ñ", courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
  { name: "–ö—ñ–≤—ñ", courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
];

const allCourses = students.flatMap((student) => student.courses);
console.log(allCourses);

const uniqeCourses = allCourses.filter(
  (course, index, array) => array.indexOf(course) === index
);

console.log(uniqeCourses); */
/* const LOW_SCORE = 50;
const HIGH_SCORE = 80;
const students = [
  { name: "–ú–∞–Ω–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 59 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
  { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
];

const best = students.filter((student) => student.score >= HIGH_SCORE);
console.log(best);

const worst = students.filter((student) => student.score <= LOW_SCORE);
console.log(worst);

const average = students.filter(
  (student) => student.score >= LOW_SCORE && student.score <= HIGH_SCORE
);
console.log(average); */

// !==========Mathod .find()==============

/* const colorPickerOptions = [
  { label: "red", color: "#F44336" },
  { label: "green", color: "#4CAF50" },
  { label: "blue", color: "#2196F3" },
  { label: "pink", color: "#E91E63" },
  { label: "indigo", color: "#3F51B5" },
];

console.log(colorPickerOptions.find((option) => option.label === "blue"));

console.log(colorPickerOptions.find((option) => option.label === "pink"));

console.log(colorPickerOptions.find((option) => option.label === "white")); */

// !==========Mathod .findIndex()==============

/* const colorPickerOptions = [
  { label: "red", color: "#F44336" },
  { label: "green", color: "#4CAF50" },
  { label: "blue", color: "#2196F3" },
  { label: "pink", color: "#E91E63" },
  { label: "indigo", color: "#3F51B5" },
];

console.log(colorPickerOptions.findIndex((option) => option.label === "blue"));

console.log(colorPickerOptions.findIndex((option) => option.label === "white"));
 */

// !==========Mathod .every()==============

/* console.log([1, 2, 3, 4, 5].every((value) => value >= 0));

console.log([1, 2, 3, -10, 4, 5].every((value) => value >= 0));
 */
// !==========Mathod .some()==============

/* console.log([1, 2, 3, 4, 5].some((value) => value >= 0));

console.log([-7, -20, 3, -10, -14].some((value) => value >= 0));

console.log([1, 2, 3, 4, 5].some((value) => value < 0));

console.log([1, 2, 3, -10, 4, 5].some((value) => value < 0)); */

/* const fruits = [
  { name: "apples", amount: 100 },
  { name: "bananas", amount: 0 },
  { name: "grapes", amount: 50 },
];

const allAvailable = fruits.every((fruit) => fruit.amount > 0);
console.log(allAvailable);

const anyAvailable = fruits.some((fruit) => fruit.amount > 0);
console.log(anyAvailable);
 */

// !==========Mathod .reduce()==============

/* const total = [2, 7, 3, 14, 6].reduce((previousValue, number) => {
  return previousValue + number;
}, 0);

console.log(total); */

/* const students = [
  { name: "–ú–∞–Ω–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 59 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
  { name: "–•'—é—Å—Ç–æ–Ω", score: 64 },
];

const totalScore = students.reduce((total, student) => {
  return total + student.score;
}, 0);

console.log(totalScore / students.length); */
/* const tweets = [
  { id: "000", likes: 5, tags: ["js", "nodejs"] },
  { id: "001", likes: 2, tags: ["html", "css"] },
  { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
  { id: "003", likes: 8, tags: ["css", "react"] },
  { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
];

const getTags = (tweets) =>
  tweets.reduce((allTags, tweet) => {
    allTags.push(...tweet.tags);
    return allTags;
  }, []);

const tags = getTags(tweets);
// console.log(tags);

const getTagStats = (acc, tag) => {
  if (!acc.hasOwnProperty(tag)) {
    acc[tag] = 0;
  }

  acc[tag] += 1;

  return acc;
};

const countTags = (tags) => tags.reduce(getTagStats, {});

console.log(countTags(tags)); */

// !   ===============================================
/* const countTags = (acc, tags) => {
  for (let i = 0; i < tags.length; i += 1) {
    if (!acc.hasOwnProperty(tags[i])) {
      acc[tags[i]] = 0;
    }
    acc[tags[i]] += 1;
  }
  return acc;
};

console.log(countTags({}, tags));
 */

// ! Method ====================.sort()==================

// const scores = [61, 19, 74, 35, 92, 56];
// scores.sort();
// console.log(scores);

// const scores = [27, 2, 41, 4, 7, 3, 75];
// scores.sort();
// console.log(scores);

// const students = ["–í—ñ–∫–∞", "–ê–Ω–¥—Ä—ñ–π", "–û–ª–µ–≥", "–Æ–ª—è", "–ë–æ—Ä–∏—Å", "–ö–∞—Ç—è"];

// students.sort();

// console.log(students);

// const letters = ["b", "B", "a", "A", "c", "C"];

// letters.sort();

// console.log(letters);

// const scores = [61, 19, 74, 35, 92, 56];

// const ascendingScores = [...scores].sort();

// console.log(ascendingScores);

// const scores = [61, 19, 74, 35, 92, 56];
// const ascendingScores = [...scores].sort((a, b) => a - b);
// console.log(ascendingScores);

// const scores = [61, 19, 74, 35, 92, 56];

// const descendingScores = [...scores].sort((a, b) => b - a);
// console.log(descendingScores);

// const students = ["–í—ñ–∫–∞", "–ê–Ω–¥—Ä—ñ–π", "–û–ª–µ–≥", "–Æ–ª—è", "–ë–æ—Ä–∏—Å", "–ö–∞—Ç—è"];

// const inAlphabetOrder = [...students].sort((a, b) => a.localeCompare(b));

// console.log(inAlphabetOrder);

// const inReversedOrder = [...students].sort((a, b) => b.localeCompare(a));

// console.log(inReversedOrder);
/* 
const students = [
  { name: "–ú–∞–Ω–≥–æ", score: 83 },
  { name: "–ü–æ–ª—ñ", score: 59 },
  { name: "–ê—è–∫—Å", score: 37 },
  { name: "–ö—ñ–≤—ñ", score: 94 },
];

const inAscendingScoreOrder = [...students].sort((a, b) => a.score - b.score);

console.log(inAscendingScoreOrder);

const inDescendingScoreOrder = [...students].sort((a, b) => b.score - a.score);

console.log(inDescendingScoreOrder);

const inAlphabetNameOrder = [...students].sort((a, b) =>
  a.name.localeCompare(b.name)
);

console.log(inAlphabetNameOrder); */
// !=====================================================!

/* const students = [
  { name: "–ú–∞–Ω–≥–æ", score: 83, courses: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ—ñ–∑–∏–∫–∞"] },
  { name: "–ü–æ–ª—ñ", score: 59, courses: ["—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"] },
  { name: "–ê—è–∫—Å", score: 37, courses: ["—Ñ—ñ–∑–∏–∫–∞", "–±—ñ–æ–ª–æ–≥—ñ—è"] },
  { name: "–ö—ñ–≤—ñ", score: 94, courses: ["–ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"] },
]; */

/* const inAscendingScoreOrder = [...students].sort((a, b) => a.score - b.score);

console.log(inAscendingScoreOrder);

const names = inAscendingScoreOrder.map((student) => student.name);

console.log(names); */
/* 
const names = [...students]
  .sort((a, b) => a.score - b.score)
  .map((student) => student.name);
console.log(names); */

/* const uniqueSortedCourses = students
  .flatMap((student) => student.courses)
  .filter((course, index, array) => array.indexOf(course) === index)
  .sort((a, b) => a.localeCompare(b));

console.log(uniqueSortedCourses);
 */

//!============Practice from first Lesson =================

// ?======================Method .forEach()===================

// const numbers = [5, 10, 15, 20, 25];

// numbers.forEach((number) => console.log("number", number));

// console.log(numbers);

// ?====================Method .map()=========================

/* const numbers = [5, 10, 15, 20, 25];
console.log("üöÄ ~ numbers:", numbers);

const doubledNums = numbers.map((number) => number * 3);
console.log("üöÄ ~ doubledNums:", doubledNums);
 */

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: true },
  { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
  { id: "player-5", name: "Chelsy", timePlayed: 80, points: 48, online: true },
];
console.log("üöÄ ~ players:", players);

const playerNames = players.map((player) => player.name);
console.log("üöÄ ~ playerNames:", playerNames);

const playerIds = players.map((player) => player.id);
console.log("üöÄ ~ playerIds:", playerIds);

const res = players.map(({ name, online }) => ({
  name,
  online,
}));
console.log("üöÄ ~ res ~ res:", res); */

/* const updatedPlayers = players.map((player) => ({
  ...player,
  points: Number((player.points * 1.1).toFixed(1)),
}));
console.log("üöÄ ~ updatedPlayers ~ updatedPlayers:", updatedPlayers);
 */
// const playerIdToUpdate = "player-3";

/* const updatedPlayers = players.map((player) => {
  if (playerIdToUpdate === player.id) {
    return {
      ...player,
      timePlayed: player.timePlayed + 100,
    };
  }
  return player;
});
console.log("üöÄ ~ updatedPlayers ~ updatedPlayers:", updatedPlayers); */

/* const updatePlayers = players.map((player) =>
  playerIdToUpdate === player.id
    ? { ...player, timePlayed: player.timePlayed + 100 }
    : player
);
console.log("üöÄ ~ updatePlayers:", updatePlayers);
 */

// ?====================Method .filter()=========================

/* const numbers = [5, 10, 15, 20, 25];

const filteredNUmbers = numbers.filter((number) => number > 10);
console.log("üöÄ ~ filteredNUmbers:", filteredNUmbers); */

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: true },
  { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
  { id: "player-5", name: "Chelsy", timePlayed: 280, points: 48, online: true },
];

const filteredPlayersByOnline = players.filter((player) => player.online);
console.log("üöÄ ~ filteredPlayersByOnline:", filteredPlayersByOnline);

const filteredPlayersByOffline = players.filter((player) => !player.online);
console.log("üöÄ ~ filteredPlayersByOffline:", filteredPlayersByOffline);

const hardcorePlayers = players.filter((player) => player.timePlayed > 200);
console.log("üöÄ ~ hardcorePlayers:", hardcorePlayers);
 */

// ?====================Method .find()=========================

/* const numbers = [5, 10, 15, 20, 25];

const number = numbers.find((number) => {
  return number === 10;
});
console.log("üöÄ ~ number:", number); */

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: true },
  { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
  { id: "player-5", name: "Chelsy", timePlayed: 280, points: 48, online: true },
];
 */
/* const playerIdToFind = "player-3";

const playerWithId = players.find((player) => player.id === playerIdToFind);
console.log("üöÄ ~ playerWithId:", playerWithId);
 */
/* 
const findPlayerById = (allPlayers, playerId) => {
  return allPlayers.find(({ id }) => id === playerId);
};

console.log(findPlayerById(players, "player-1"));
console.log(findPlayerById(players, "player-4")); */

/* const playerNameToFind = "Poly";

const playerWithName = players.find(
  (player) => player.name === playerNameToFind
);
console.log("üöÄ ~ playerWithName:", playerWithName); */

// ?====================Method .every()=========================

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, points: 54, online: true },
  { id: "player-2", name: "Poly", timePlayed: 470, points: 92, online: false },
  { id: "player-3", name: "Kiwi", timePlayed: 230, points: 48, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, points: 71, online: false },
  { id: "player-5", name: "Chelsy", timePlayed: 280, points: 48, online: true },
];
const isAllOnline = players.every((player) => player.online);
console.log("üöÄ ~ isAllOnline:", isAllOnline); */

// ?====================Method .some()=========================

/* const isAnyOnline = players.some((player) => player.online);
console.log("üöÄ ~ isAnyOnline:", isAnyOnline);

const anyHardcorePlayer = players.some((player) => player.timePlayed > 400);
console.log("üöÄ ~ anyHardcorePlayer:", anyHardcorePlayer); */

// ?====================Method .reduce()=========================

/* const numbers = [5, 10, 15, 10, 25];

const total = numbers.reduce((acc, number) => acc + number, 0);
console.log("üöÄ ~ total ~ total:", total);
 */

// –†–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–ø–ª–∞—Ç
/* 
const salary = {
  mango: 100,
  poly: 50,
  ajax: 150,
};
const totalSalary = Object.values(salary).reduce(
  (total, sum) => total + sum,
  0
);
console.log("üöÄ ~ totalSalary:", totalSalary);
 */

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, online: true },
  { id: "player-3", name: "Kiwi", timePlayed: 230, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, online: false },
  { id: "player-5", name: "Chelsey", timePlayed: 80, online: true },
];

const totalTimePlayed = players.reduce(
  (totalTime, player) => totalTime + player.timePlayed,
  0
);
console.log("üöÄ ~ totalTimePlayed:", totalTimePlayed); */

/* const cart = [
  { label: "Apples", price: 100, quantity: 2 },
  { label: "Bananas", price: 120, quantity: 3 },
  { label: "Lemons", price: 70, quantity: 4 },
];

const totalAmount = cart.reduce(
  (total, { price, quantity }) => price * quantity,
  0
);
console.log("üöÄ ~ totalAmount:", totalAmount); */

/* const tweets = [
  { id: "000", likes: 5, tags: ["js", "nodejs"] },
  { id: "001", likes: 2, tags: ["html", "css"] },
  { id: "002", likes: 17, tags: ["html", "js", "nodejs"] },
  { id: "003", likes: 8, tags: ["css", "react"] },
  { id: "004", likes: 0, tags: ["js", "nodejs", "react"] },
];

// –í–∞—Ä—ñ–∞–Ω—Ç - 1
const allTags = tweets.reduce((acc, { tags }) => [...acc, ...tags], []);
console.log("üöÄ ~ allTags:", allTags); */

/* const tagStats = allTags.reduce((acc, tag) => {
  if (acc[tag]) {
    acc[tag] += 1;
    return acc;
  }

  acc[tag] = 1;

  return acc;
}, {});
console.log("üöÄ ~ tagStats ~ tagStats:", tagStats); */
/* 
const tagsStats = allTags.reduce(
  (acc, tag) => ({ ...acc, [tag]: acc[tag] ? acc[tag] + 1 : 1 }),
  {}
);
console.log("üöÄ ~ tagsStats:", tagsStats); */

// ?====================Method .sort()=========================

/* const numbers = [1, 9, 6, 2, 3];
numbers.sort();

console.log("üöÄ ~ numbers:", numbers);

const letters = ["b", "B", "a", "A"];
letters.sort();

console.log("üöÄ ~ letters:", letters);

const descSortedNumber = [...numbers].sort((a, b) => b - a);
console.log("üöÄ ~ descSortedNumber:", descSortedNumber);

const ascSortedNumber = [...numbers].sort((a, b) => a - b);
console.log("üöÄ ~ ascSortedNumber:", ascSortedNumber); */

/* const players = [
  { id: "player-1", name: "Mango", timePlayed: 310, online: false },
  { id: "player-2", name: "Poly", timePlayed: 470, online: true },
  { id: "player-3", name: "Aiwi", timePlayed: 230, online: true },
  { id: "player-4", name: "Ajax", timePlayed: 150, online: false },
  { id: "player-5", name: "Chelsey", timePlayed: 80, online: true },
]; */

/* const sortedByBestPlayer = [...players].sort(
  (prevPlayer, nextPlayer) => prevPlayer.timePlayed - nextPlayer.timePlayed
);

console.log("üöÄ ~ sortedBybestPlayer:", sortedByBestPlayer);

const sortedByWorstPlayer = [...players].sort(
  (prevPlayer, nextPlayer) => nextPlayer.timePlayed - prevPlayer.timePlayed
); */

/* console.log("üöÄ ~ sortedByWorstPlayer:", sortedByWorstPlayer); */

/* const byName = [...players].sort((a, b) => {
  const result = a.name[0] > b.name[0];
  if (result) {
    return 1;
  }
  if (!result) {
    return -1;
  }
});
console.table(byName);
 */

/* const byName = [...players].sort((a, b) => a.name.localeCompare(b.name));

console.table(byName);
 */

// !===============Practice from third video lesson==============

const cars = [
  {
    make: "Honda",
    model: "CR-V",
    type: "suv",
    amount: 14,
    price: 24045,
    onSale: true,
  },
  {
    make: "Honda",
    model: "Accord",
    type: "sedan",
    amount: 2,
    price: 22455,
    onSale: true,
  },
  {
    make: "Mazda",
    model: "Mazda 6",
    type: "sedan",
    amount: 8,
    price: 24195,
    onSale: false,
  },
  {
    make: "Mazda",
    model: "CX-9",
    type: "suv",
    amount: 7,
    price: 31520,
    onSale: true,
  },
  {
    make: "Toyota",
    model: "4Runner",
    type: "suv",
    amount: 19,
    price: 34210,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Sequoia",
    type: "suv",
    amount: 16,
    price: 45560,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Tacoma",
    type: "truck",
    amount: 4,
    price: 24320,
    onSale: true,
  },
  {
    make: "Ford",
    model: "F-150",
    type: "truck",
    amount: 11,
    price: 27110,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Fusion",
    type: "sedan",
    amount: 13,
    price: 22120,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Explorer",
    type: "suv",
    amount: 6,
    price: 31660,
    onSale: false,
  },
];

//* Example 1 - –ú–µ—Ç–æ–¥ map
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ model) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.

/* const getModels = (models) => {
  return models.map(({ model }) => model);
};

console.log("üöÄgetModels:", getModels(cars)); */

//* Example 2 - –ú–µ—Ç–æ–¥ map
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è makeCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏.

// const makeCarsWithDiscount = (cars, discount) =>
//   cars.map((car) => ({ ...car, price: car.price * (1 - discount) }));
// console.log(makeCarsWithDiscount(cars, 0.2));
// console.log(makeCarsWithDiscount(cars, 0.3));

//* Example 3 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è filterByPrice –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–∞ –Ω—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ threshold.

/* const filterByPrice = (cars, threshold) => {
  return cars.filter((car) => car.price < threshold);
};

console.log("üöÄfilterByPrice:", filterByPrice(cars, 30000));

console.log("üöÄfilterByPrice:", filterByPrice(cars, 23000));
 */

//* Example 4 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å onSale —è–∫–∏—Ö true.

/* const getCarsWithDiscount = (cars) => cars.filter((car) => !car.onSale);

console.log(getCarsWithDiscount(cars)); */

//* Example 5 - –ú–µ—Ç–æ–¥ filter
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithType –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∏–ø —è–∫–∏—Ö –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ type.
/* 
const getCarsWithType = (cars, carType) =>
  cars.filter((car) => car.type === carType);

console.table(getCarsWithType(cars, "suv"));
console.table(getCarsWithType(cars, "sedan"));
console.table(getCarsWithType(cars, "truck")); */

//* Example 6 - –ú–µ—Ç–æ–¥ find

/* const getCarByModel = (cars, model) => cars.find((car) => car.model === model);

console.log(getCarByModel(cars, "F-150"));
console.log(getCarByModel(cars, "CX-9")); */

//* Example 7 - –ú–µ—Ç–æ–¥ sort

/* const arr = [1, 5, 14, 32, 2, 34, 3, 54, 21, 3];

arr.sort((a, b) => a - b);
console.log(arr);

arr.sort((a, b) => b - a);
console.log(arr); */

/* const arr = ["b", "r", "s", "a", "c"];
arr.sort((a, b) => a.localeCompare(b));
console.log(arr);

arr.sort((a, b) => b.localeCompare(a));
console.log(arr);
 */

//* Example 7 - –ú–µ—Ç–æ–¥ sort
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByAscendingAmount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ amount.

/* const sortByAscendingAmount = (cars) =>
  [...cars].sort((a, b) => a.amount - b.amount);

console.table(sortByAscendingAmount(cars));
 */
//* Example 8 - –ú–µ—Ç–æ–¥ sort
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByDescendingPrice –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price.

/* const sortByDescendingPrice = (cars) =>
  [...cars].sort((a, b) => b.price - a.price);

console.table(sortByDescendingPrice(cars));
 */

//* Example 9 - –ú–µ—Ç–æ–¥ sort
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByModel –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –Ω–∞–∑–≤–æ—é –º–æ–¥–µ–ª—ñ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É —Ç–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ order.

/* console.log("hello");

const sortByModel = (cars, order) =>
  [...cars].sort((a, b) => {
    switch (order) {
      case "asc":
        return a.model.localeCompare(b.model);

      case "desc":
        return b.model.localeCompare(a.model);
    }
  });

console.log(sortByModel(cars, "asc"));
console.log(sortByModel(cars, "desc")); */

//* Example 10 - –ú–µ—Ç–æ–¥ reduce
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getTotalAmount –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ (–∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π amount).

/* const getTotalAmount = (cars) =>
  cars.reduce((totalSum, { amount }) => totalSum + amount, 0);

console.log("üöÄ ~ getTotalAmount:", getTotalAmount(cars));
 */

//* Example 11 - –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getAvailableCarNames –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —è–∫—ñ –∑–∞—Ä–∞–∑ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ.

/* const getAvailableCarNames = (cars) =>
  cars.filter(({ onSale }) => onSale).map(({ model }) => model);

console.log(getAvailableCarNames(cars)); */

//* Example 12 - –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
// –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getSortedCarsOnSale –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ (–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å onSale), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ü—ñ–Ω–∏.

/* const getSortedCarsOnSale = (cars) =>
  cars.filter(({ onSale }) => onSale).sort((a, b) => a.price - b.price);

console.log(getSortedCarsOnSale(cars));
 */

/* const numbers = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5];

const uniqueNumbers = (numbers) => {
  return numbers.filter(
    (number, index, array) => array.indexOf(number) === index
  );
};
console.log("üöÄ ~ uniqueNumbers:", uniqueNumbers(numbers));
 */

// !====================================Homework===============================================

// ? Exercise 1
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π result –±—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó makePizza, –∞ —É –∑–º—ñ–Ω–Ω—ñ–π pointer –±—É–ª–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é makePizza.

// function makePizza() {
//   return "Your pizza is being prepared, please wait.";
// }
// // Change code below this line

// const result = makePizza();
// const pointer = makePizza;

// ? Exercise 2
// –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é makeMessage —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –æ—á—ñ–∫—É–≤–∞–ª–∞ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–ø–∞—Ä–∞–º–µ—Ç—Ä callback) –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ —ó—ó –≤–∏–∫–ª–∏–∫. –§—É–Ω–∫—Ü—ñ—è deliverPizza –∞–±–æ makePizza –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è —è–∫ –∫–æ–ª–±–µ–∫ —ñ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ–º'—è –≥–æ—Ç–æ–≤–æ—ó –ø—ñ—Ü–∏, —â–æ –¥–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è.

// function deliverPizza(pizzaName) {
//   return `Delivering ${pizzaName} pizza.`;
// }

// function makePizza(pizzaName) {
//   return `Pizza ${pizzaName} is being prepared, please wait...`;
// }

// // Chande code below this line
// function makeMessage(pizzaName, callback) {
//   return callback(pizzaName);
// }

// ? Exercise 3
/* –î–æ–ø–æ–≤–Ω–∏ –¥—Ä—É–≥–∏–π –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó makePizza(pizzaName, callback), –ø–µ—Ä–µ–¥–∞–≤—à–∏ –¥—Ä—É–≥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ–Ω–ª–∞–π–Ω –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é eatPizza(pizzaName), —è–∫–∞ –ª–æ–≥—É—î —Ä—è–¥–æ–∫ "Eating pizza <–Ω–∞–∑–≤–∞ –ø—ñ—Ü–∏>". */

/* function makePizza(pizzaName, callback) {
  console.log(`Pizza ${pizzaName} is being prepared, please wait...`);
  callback(pizzaName);
}

makePizza("Royal Grand", function deliverPizza(pizzaName) {
  console.log(`Delivering pizza ${pizzaName}.`);
});
// Change code below this line

makePizza("Ultracheese", function eatPizza(pizzaName){
 console.log(`Eating pizza ${pizzaName}`); 
}); */

// ? Exercise 4
/* –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏. –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥—É order —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤—ñ–Ω –ø—Ä–∏–π–º–∞–≤ –¥—Ä—É–≥–∏–º —ñ —Ç—Ä–µ—Ç—ñ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–≤–∞ –∫–æ–ª–±–µ–∫–∏ onSuccess —ñ onError.

–Ø–∫—â–æ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ pizzas –≤—ñ–¥—Å—É—Ç–Ω—è –ø—ñ—Ü–∞ –∑ –Ω–∞–∑–≤–æ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pizzaName, –º–µ—Ç–æ–¥ order –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞ onError, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ä—è–¥–æ–∫ "There is no pizza with a name <–∏–º—è –ø–∏—Ü—Ü—ã> in the assortment."
–Ø–∫—â–æ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ pizzas –ø—Ä–∏—Å—É—Ç–Ω—è –ø—ñ—Ü–∞ –∑ –Ω–∞–∑–≤–æ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pizzaName, –º–µ—Ç–æ–¥ order –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞ onSuccess, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–∑–≤—É –∑–∞–º–æ–≤–ª–µ–Ω–æ—ó –ø—ñ—Ü–∏. */

/* const pizzaPalace = {
  pizzas: ["Ultracheese", "Smoked", "Four meats"],
  order(pizzaName, onSuccess, onError) {
if(this.pizzas.includes(pizzaName)){
  return onSuccess(pizzaName)
}
return onError(`There is no pizza with a name ${pizzaName} in the assortment.`)
},
};
// Change code above this line

// Callback for onSuccess
function makePizza(pizzaName) {
  return `Your order is accepted. Cooking pizza ${pizzaName}.`;
}

// Callback for onError
function onOrderError(error) {
  return `Error! ${error}`;
}

// Method calls with callbacks
pizzaPalace.order("Smoked", makePizza, onOrderError);
pizzaPalace.order("Four meats", makePizza, onOrderError);
pizzaPalace.order("Big Mike", makePizza, onOrderError);
pizzaPalace.order("Vienna", makePizza, onOrderError); */

// ? Exercise 5

/* –§—É–Ω–∫—Ü—ñ—è calculateTotalPrice(orderedItems) –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä orderedItems - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª, —ñ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π totalPrice —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó.

–í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É for, –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –º–µ—Ç–æ–¥ forEach. */

/* 
function calculateTotalPrice(orderedItems) {
  let totalPrice = 0;
  // Change code below this line
orderedItems.forEach((number)=>{
totalPrice += number;
})

 

  // Change code above this line
  return totalPrice;
}
 */

// ? Exercise 6

/* –§—É–Ω–∫—Ü—ñ—è filterArray(numbers, value) –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤—É, —è–∫—ñ –±—ñ–ª—å—à—ñ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value.

–í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É for, –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –º–µ—Ç–æ–¥ forEach. */

// function filterArray(numbers, value) {
//   const filteredNumbers = [];
//   // Change code below this line

//   for (let i = 0; i < numbers.length; i += 1) {
//     if (numbers[i] > value) {
//       filteredNumbers.push(numbers[i]);
//     }
//   }

//   // Change code above this line
//   return filteredNumbers;
// }

/* 
function filterArray(numbers, value) {
  const filteredNumbers = [];
  // Change code below this line
numbers.forEach((number)=> {
if(number > value){
  filteredNumbers.push(number);
}
})

 

  // Change code above this line
  return filteredNumbers;
}
 */

// ? Exercise 7

/* –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice() —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ –æ–≥–æ–ª–æ—à–µ–Ω–∞ —è–∫ —Å—Ç—Ä—ñ–ª–æ—á–Ω–∞. */

// const calculateTotalPrice = (quantity, pricePerItem) => quantity * pricePerItem;

// ? Exercise 8

/*–í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice() —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –Ω–µ—è–≤–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è */

/* const calculateTotalPrice = (quantity, pricePerItem) => quantity * pricePerItem;
// Change code above this line */

// ? Exercise 9
/* –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice(orderedItems), –∑–∞–º—ñ–Ω–∏–≤—à–∏ —ó—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é. –ó–∞–º—ñ–Ω–∏ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é, –ø–µ—Ä–µ–¥–∞–Ω—É –≤ –º–µ—Ç–æ–¥ forEach(), –Ω–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é. */

/* 
// Change code below this line
const calculateTotalPrice = (orderedItems) => {
  let totalPrice = 0;

  orderedItems.forEach((item) => totalPrice += item);

  return totalPrice;
}
// Change code above this line */

// ? Exercise 10
/* –ó–∞–º—ñ–Ω–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó filterArray() —ñ –∫–æ–ª–±–µ–∫ –¥–ª—è –º–µ—Ç–æ–¥—É forEach() –Ω–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. */
/* 
// Change code below this line
const  filterArray = (numbers, value) => {
  const filteredNumbers = [];

  numbers.forEach((number) => {
    if (number > value) {
      filteredNumbers.push(number);
    }
  });

  // Change code above this line
  return filteredNumbers;
}
 */

// ? Exercise 11

/* –§—É–Ω–∫—Ü—ñ—è changeEven(numbers, value) –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —ñ –æ–Ω–æ–≤–ª—é—î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ–≥–æ - —Ü–µ –ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ, –¥–æ–¥–∞—é—á–∏ –¥–æ –Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value.

–í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ —Å—Ç–∞–ª–∞ —á–∏—Å—Ç–æ—é - –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–∞ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers, –∞ —Å—Ç–≤–æ—Ä—é–≤–∞–ª–∞, –Ω–∞–ø–æ–≤–Ω—é–≤–∞–ª–∞ —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏. */

/* function changeEven(numbers, value) {
  // Change code below this line
  const newArray = [...numbers];
  for (let i = 0; i < newArray.length; i += 1) {
    if (newArray[i] % 2 === 0) {
      newArray[i] = newArray[i] + value;
    }
  }
  return newArray;
}

console.log(changeEven([1, 2, 3, 4, 5], 10));
 */

// ? Exercise 12

/* –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π planetsLengths –≤–∏–π—à–æ–≤ –º–∞—Å–∏–≤ –¥–æ–≤–∂–∏–Ω –Ω–∞–∑–≤ –ø–ª–∞–Ω–µ—Ç. –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥ map(). */

/* const planets = ["Earth", "Mars", "Venus", "Jupiter"];
// Change code below this line
const planetsLengths = planets.map((planet) => planet.length);
 */

// ? Exercise 13
/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ map(), –∑—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π titles –≤–∏–π—à–æ–≤ –º–∞—Å–∏–≤ –Ω–∞–∑–≤ –∫–Ω–∏–≥ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å title) –∑ —É—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ –º–∞—Å–∏–≤—É books. */

/* const books = [
  {
    title: "The Last Kingdom",
    author: "Bernard Cornwell",
    rating: 8.38,
  },
  {
    title: "Beside Still Waters",
    author: "Robert Sheckley",
    rating: 8.51,
  },
  {
    title: "The Dream of a Ridiculous Man",
    author: "Fyodor Dostoevsky",
    rating: 7.75,
  },
  { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
  { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
];
// Change code below this line

const titles = books.map(book => book.title); */

// ? Exercise 14
/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ flatMap(), –∑—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π genres –≤–∏–π—à–æ–≤ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –∂–∞–Ω—Ä—ñ–≤ –∫–Ω–∏–≥ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å genres) –∑ –º–∞—Å–∏–≤—É –∫–Ω–∏–≥ books. */

/* const books = [
  {
    title: "The Last Kingdom",
    author: "Bernard Cornwell",
    genres: ["adventure", "history"],
  },
  {
    title: "Beside Still Waters",
    author: "Robert Sheckley",
    genres: ["fiction"],
  },
  {
    title: "Redder Than Blood",
    author: "Tanith Lee",
    genres: ["horror", "mysticism"],
  },
];
// Change code below this line

const genres = books.flatMap(book => book.genres); */

// ? Exercise 15

const users = [
  {
    name: "Moore Hensley",
    email: "moorehensley@indexia.com",
    eyeColor: "blue",
    friends: ["Sharron Pace"],
    isActive: false,
    balance: 2811,
    skills: ["ipsum", "lorem"],
    gender: "male",
    age: 37,
  },
  {
    name: "Sharlene Bush",
    email: "sharlenebush@tubesys.com",
    eyeColor: "blue",
    friends: ["Briana Decker", "Sharron Pace"],
    isActive: true,
    balance: 3821,
    skills: ["tempor", "mollit", "commodo", "veniam", "laborum"],
    gender: "female",
    age: 34,
  },
  {
    name: "Ross Vazquez",
    email: "rossvazquez@xinware.com",
    eyeColor: "green",
    friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
    isActive: false,
    balance: 3793,
    skills: ["nulla", "anim", "proident", "ipsum", "elit"],
    gender: "male",
    age: 24,
  },
  {
    name: "Elma Head",
    email: "elmahead@omatom.com",
    eyeColor: "green",
    friends: ["Goldie Gentry", "Aisha Tran"],
    isActive: true,
    balance: 2278,
    skills: ["adipisicing", "irure", "velit"],
    gender: "female",
    age: 21,
  },
  {
    name: "Carey Barr",
    email: "careybarr@nurali.com",
    eyeColor: "blue",
    friends: ["Jordan Sampson", "Eddie Strong"],
    isActive: true,
    balance: 3951,
    skills: ["ex", "culpa", "nostrud"],
    gender: "male",
    age: 27,
  },
  {
    name: "Blackburn Dotson",
    email: "blackburndotson@furnigeer.com",
    eyeColor: "brown",
    friends: ["Jacklyn Lucas", "Linda Chapman"],
    isActive: false,
    balance: 1498,
    skills: ["non", "amet", "ipsum"],
    gender: "male",
    age: 38,
  },
  {
    name: "Sheree Anthony",
    email: "shereeanthony@kog.com",
    eyeColor: "brown",
    friends: ["Goldie Gentry", "Briana Decker"],
    isActive: true,
    balance: 2764,
    skills: ["lorem", "veniam", "culpa"],
    gender: "female",
    age: 39,
  },
];

/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getUserEmails(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –ø–æ—à—Ç–æ–≤–∏—Ö –∞–¥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å email) –∑ –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ users. */

/* const getUserEmails = users => {
    return users.map(user => user.email)

  }; */

// ? Exercise 15
/* const numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];
// Change code below this line

const evenNumbers = numbers.filter((number) => number % 2 === 0);
console.log("üöÄ ~ evenNumbers:", evenNumbers);
const oddNumbers = numbers.filter((number) => number % 2 !== 0);
console.log("üöÄ ~ oddNumbers:", oddNumbers);
 */

// ? Exercise 16
/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ filter(), –¥–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–±:

–£ –∑–º—ñ–Ω–Ω—ñ–π topRatedBooks —É—Ç–≤–æ—Ä–∏–≤—Å—è –º–∞—Å–∏–≤ –∫–Ω–∏–≥, —Ä–µ–π—Ç–∏–Ω–≥ —è–∫–∏—Ö (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å rating) –±—ñ–ª—å—à–∏–π –∑–∞ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –∑–Ω–∞—á–µ–Ω–Ω—é –∑–º—ñ–Ω–Ω–æ—ó MIN_RATING.
–£ –∑–º—ñ–Ω–Ω—ñ–π booksByAuthor —É—Ç–≤–æ—Ä–∏–≤—Å—è –º–∞—Å–∏–≤ –∫–Ω–∏–≥, –Ω–∞–ø–∏—Å–∞–Ω–∏—Ö –∞–≤—Ç–æ—Ä–æ–º –∑ —ñ–º'—è–º (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å author), —è–∫–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º —É –∑–º—ñ–Ω–Ω—ñ–π AUTHOR. */

/* const books = [
  {
    title: "The Last Kingdom",
    author: "Bernard Cornwell",
    rating: 8.38,
  },
  {
    title: "Beside Still Waters",
    author: "Robert Sheckley",
    rating: 8.51,
  },
  {
    title: "The Dream of a Ridiculous Man",
    author: "Fyodor Dostoevsky",
    rating: 7.75,
  },
  { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
  { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
];

const MIN_RATING = 8;
const AUTHOR = "Bernard Cornwell";
// Change code below this line

const topRatedBooks = books.filter(book => book.rating > MIN_RATING);
const booksByAuthor = books.filter(book => book.author === AUTHOR); */

// ? Exercise 17
/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getUsersWithEyeColor(users, color) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö –∫–æ–ª—ñ—Ä –æ—á–µ–π (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å eyeColor) –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ color. */

/* const getUsersWithEyeColor = (users, color) => {
  return users.filter(user => user.eyeColor === color)
 
 }; */

// ? Exercise 18

/* –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó getUsersWithAge(users, minAge, maxAge), —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –≤—ñ–∫ (–∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ age) —è–∫–∏—Ö –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –∑–∞–¥–∞–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –≤—ñ–¥ minAge –¥–æ maxAge.

–ü–æ—Ä–∞–¥–∏:

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –º–µ—Ç–æ–¥ filter() –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É, –≤ —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å –ø–µ–≤–Ω—É —É–º–æ–≤—É.
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ >= (–±—ñ–ª—å—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î) —Ç–∞ <= (–º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î), —â–æ–± –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –≤—ñ–∫ —è–∫–∏—Ö —Ç–æ—á–Ω–æ –ø–æ—Ç—Ä–∞–ø–ª—è—î —É –¥—ñ–∞–ø–∞–∑–æ–Ω –º—ñ–∂ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º minAge —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º maxAge –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏. */

/* const getUsersWithAge = (users, minAge, maxAge) => {
  return users.filter(user => user.age >= minAge && user.age <= maxAge)
 
 }; */

// ? Exercise 18
/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getUsersWithFriend(users, friendName) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö —î –¥—Ä—É–≥ –∑ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–º–µ–Ω–µ–º friendName. –î—Ä—É–∑—ñ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ friends.

–ü–æ—Ä–∞–¥–∏:

–ú–µ—Ç–æ–¥ filter() –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏, —è–∫—ñ –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—é—Ç—å –ø–µ–≤–Ω—É —É–º–æ–≤—É.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥ includes() –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –º–∞—Å–∏–≤ friends –º—ñ—Å—Ç–∏—Ç—å friendName. */

/* const getUsersWithFriend = (users, friendName) => {
  return users.filter((user) => user.friends.includes(friendName));
};
 */

// ? Exercise 19

/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getFriends(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –¥—Ä—É–∑—ñ–≤ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends). –£ –¥–µ–∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –¥—Ä—É–∑—ñ, –∑—Ä–æ–±–∏ —Ç–∞–∫, —â–æ–± –º–∞—Å–∏–≤, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, –Ω–µ –º—ñ—Å—Ç–∏–≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å. */

/* const getFriends = (users) => {
  return users
    .flatMap((user) => user.friends)
    .filter((friend, index, array) => array.indexOf(friend) === index);
};

console.log(getFriends(users));
 */

// ? Exercise 20

/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getActiveUsers(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ isActive —è–∫–∏—Ö - true. */

/* // Change code below this line
const getActiveUsers = (users) => {
  return users.filter((user) => user.isActive);
};
// Change code above this line
 */

// ? Exercise 21

/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥ find(), –¥–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–±:

–£ –∑–º—ñ–Ω–Ω—ñ–π bookWithTitle —É—Ç–≤–æ—Ä–∏–≤—Å—è –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏, –Ω–∞–∑–≤–∞ —è–∫–æ—ó (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å title) –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑–º—ñ–Ω–Ω–æ—ó BOOK_TITLE.
–£ –∑–º—ñ–Ω–Ω—ñ–π bookByAuthor —É—Ç–≤–æ—Ä–∏–≤—Å—è –æ–±'—î–∫—Ç –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä —è–∫–æ—ó (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å author) –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –∑–º—ñ–Ω–Ω–æ—ó AUTHOR. */

/* const books = [
  {
    title: 'The Last Kingdom',
    author: 'Bernard Cornwell',
    rating: 8.38,
  },
  {
    title: 'Beside Still Waters',
    author: 'Robert Sheckley',
    rating: 8.51,
  },
  {
    title: 'The Dream of a Ridiculous Man',
    author: 'Fyodor Dostoevsky',
    rating: 7.75,
  },
  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },
];
const BOOK_TITLE = 'The Dream of a Ridiculous Man';
const AUTHOR = 'Robert Sheckley';
// Change code below this line

const bookWithTitle = books.find(book => book.title === BOOK_TITLE);
const bookByAuthor = books.find(book => book.author === AUTHOR);
 */

// ? Exercise 22

/* –Ü–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É, –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –≤ —ñ–≥—Ä–∞—Ö. –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π totalPlayTime –≤–∏–π—à–ª–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —ñ–≥—Ä–æ–≤–∏–π —á–∞—Å –∑ –º–∞—Å–∏–≤—É playtimes. */

/* const players = {
  mango: 1270,
  poly: 468,
  ajax: 710,
  kiwi: 244
};
const playtimes = Object.values(players); // [1270, 468, 710, 244]
// Change code below this line

const totalPlayTime = playtimes.reduce((totalSum, num) => totalSum + num, 0);

// Change code above this line
const averagePlayTime = totalPlayTime / playtimes.length; */

// ? Exercise 23

/* –ù–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–π –≤ –æ–¥–Ω—ñ–π –≥—Ä—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è, —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Ü–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—É. –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∞—Å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –≥—Ä–∞–≤—Ü—ñ–≤ –º–æ–∂–Ω–∞, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ –π–æ–≥–æ —á–∞—Å (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å playtime) –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–≥–æ—Ä (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å gamesPlayed).

–ü–æ—Ä–∞–¥–∏:

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ—Ç–æ–¥ reduce() –¥–ª—è —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –ø–æ –º–∞—Å–∏–≤—É players —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –≥—Ä–∏ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É.
–£—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó reduce(), –ø–æ–¥—ñ–ª–∏ playtime –≥—Ä–∞–≤—Ü—è –Ω–∞ gamesPlayed, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å, –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω—É –≥—Ä—É.
–ù–∞–∫–æ–ø–∏—á—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑–º—ñ–Ω–Ω—ñ–π acc —ñ –ø–æ–≤–µ—Ä—Ç–∞–π –π–æ–≥–æ –≤ –∫—ñ–Ω—Ü—ñ –∫–æ–∂–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó.
–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π –ø–∞—Ä–∞–º–µ—Ç—Ä acc –º–µ—Ç–æ–¥—É reduce() –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º 0, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è NaN –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω—å.
–ü—ñ—Å–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∞ totalAveragePlaytimePerGame –º—ñ—Å—Ç–∏—Ç–∏–º–µ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –≥—Ä–∏ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤. */

/* const players = [
  { name: "Mango", playtime: 1270, gamesPlayed: 4 },
  { name: "Poly", playtime: 469, gamesPlayed: 2 },
  { name: "Ajax", playtime: 690, gamesPlayed: 3 },
  { name: "Kiwi", playtime: 241, gamesPlayed: 1 },
];
// Change code below this line

const totalAveragePlaytimePerGame = players.reduce((acc, player)=>{
return acc += player.playtime / player.gamesPlayed;
}, 0); */

// ? Exercise 24

/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getTotalFriendCount(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ —Ä–∞—Ö—É–≤–∞–ª–∞ —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—Ä—É–∑—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends) —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –º–∞—Å–∏–≤—É users. */

/* const getTotalFriendCount = (users) => {
  return users.reduce((total, user) => total + user.friends.length, 0);
};

console.log(getTotalFriendCount(users));
 */

// ? Exercise 25

/* –û–Ω–ª–∞–π–Ω –±—ñ–±—ñ–ª—ñ–æ—Ç–µ—Ü—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–Ω–∏–≥–∏, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ –∞–≤—Ç–æ—Ä–æ–º, –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É —ñ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É. –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π authorsInAlphabetOrder –≤–∏–π—à–ª–∞ –∫–æ–ø—ñ—è –º–∞—Å–∏–≤—É authors, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∞ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º, –∞ —É –∑–º—ñ–Ω–Ω—ñ–π authorsInReversedOrder - –∫–æ–ø—ñ—è, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∞ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É. */

/* const authors = [
  "Tanith Lee",
  "Bernard Cornwell",
  "Robert Sheckley",
  "Fyodor Dostoevsky",
  "Howard Lovecraft",
];
// Change code below this line

const authorsInAlphabetOrder = [...authors].sort((a, b)=> a.localeCompare(b));

const authorsInReversedOrder = [...authors].sort((a, b)=> b.localeCompare(a)); */

// ? Exercise 26

/* const books = [
  {
    title: "The Last Kingdom",
    author: "Bernard Cornwell",
    rating: 8.38,
  },
  {
    title: "Beside Still Waters",
    author: "Robert Sheckley",
    rating: 8.51,
  },
  {
    title: "The Dream of a Ridiculous Man",
    author: "Fyodor Dostoevsky",
    rating: 7.75,
  },
  { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
  { title: "Enemy of God", author: "Bernard Cornwell", rating: 8.67 },
];
// Change code below this line

const sortedByAuthorName = [...books].sort((a, b) =>
  a.author.localeCompare(b.author)
);

const sortedByReversedAuthorName = [...books].sort((a, b) =>
  b.author.localeCompare(a.author)
);

const sortedByAscendingRating = [...books].sort((a, b) => a.rating - b.rating);

const sortedByDescentingRating = [...books].sort((a, b) => b.rating - a.rating);
 */

// ? Exercise 27
/* 
const sortByDescendingFriendCount = (users) => {
  return [...users].sort((a, b) => a.friends.length - b.friends.length);
};

console.log(sortByDescendingFriendCount(users));
 */

// ? Exercise 28

/* –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π names –≤–∏–π—à–æ–≤ –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∞–≤—Ç–æ—Ä—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —Ä–µ–π—Ç–∏–Ω–≥ –∫–Ω–∏–≥ —è–∫–∏—Ö –±—ñ–ª—å—à–∏–π –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó MIN_BOOK_RATING. */

/* const books = [
  {
    title: "The Last Kingdom",
    author: "Bernard Cornwell",
    rating: 8.38,
  },
  {
    title: "Beside Still Waters",
    author: "Robert Sheckley",
    rating: 8.51,
  },
  {
    title: "The Dream of a Ridiculous Man",
    author: "Fyodor Dostoevsky",
    rating: 7.75,
  },
  { title: "Redder Than Blood", author: "Tanith Lee", rating: 7.94 },
  {
    title: "The Dreams in the Witch House",
    author: "Howard Lovecraft",
    rating: 8.67,
  },
];
const MIN_BOOK_RATING = 8;
// Change code below this line

const names = books
  .filter((book) => book.rating > MIN_BOOK_RATING)
  .sort((a, b) => a.author.localeCompare(b.author))
  .map((name) => name.author);
 */

// ? Exercise 29
/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getNamesSortedByFriendCount(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —ñ–º–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ó—Ö–Ω—ñ—Ö –¥—Ä—É–∑—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends). */

/* const getNamesSortedByFriendCount = users => {
  return [...users].sort((a, b )=> a.friends.length - b.friends.length).map(user => user.name)
}; */

// ? Exercise 30

/* –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é getSortedFriends(users) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–º–µ–Ω –¥—Ä—É–∑—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å friends), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º. */

/* const getSortedFriends = (users) => {
  return [...users]
    .flatMap((user) => user.friends)
    .filter((user, index, array) => array.indexOf(user) === index)
    .sort((a, b) => a.localeCompare(b));
};

console.log(getSortedFriends(users));
 */
